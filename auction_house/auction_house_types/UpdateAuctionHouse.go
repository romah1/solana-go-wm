// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package auction_house_types

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// UpdateAuctionHouse is the `updateAuctionHouse` instruction.
type UpdateAuctionHouse struct {
	SellerFeeBasisPoints *uint16 `bin:"optional"`
	RequiresSignOff      *bool   `bin:"optional"`
	CanChangeSalePrice   *bool   `bin:"optional"`

	// [0] = [] treasuryMint
	//
	// [1] = [SIGNER] payer
	//
	// [2] = [SIGNER] authority
	//
	// [3] = [] newAuthority
	//
	// [4] = [WRITE] feeWithdrawalDestination
	//
	// [5] = [WRITE] treasuryWithdrawalDestination
	//
	// [6] = [] treasuryWithdrawalDestinationOwner
	//
	// [7] = [WRITE] auctionHouse
	//
	// [8] = [] tokenProgram
	//
	// [9] = [] systemProgram
	//
	// [10] = [] ataProgram
	//
	// [11] = [] rent
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewUpdateAuctionHouseInstructionBuilder creates a new `UpdateAuctionHouse` instruction builder.
func NewUpdateAuctionHouseInstructionBuilder() *UpdateAuctionHouse {
	nd := &UpdateAuctionHouse{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 12),
	}
	return nd
}

// SetSellerFeeBasisPoints sets the "sellerFeeBasisPoints" parameter.
func (inst *UpdateAuctionHouse) SetSellerFeeBasisPoints(sellerFeeBasisPoints uint16) *UpdateAuctionHouse {
	inst.SellerFeeBasisPoints = &sellerFeeBasisPoints
	return inst
}

// SetRequiresSignOff sets the "requiresSignOff" parameter.
func (inst *UpdateAuctionHouse) SetRequiresSignOff(requiresSignOff bool) *UpdateAuctionHouse {
	inst.RequiresSignOff = &requiresSignOff
	return inst
}

// SetCanChangeSalePrice sets the "canChangeSalePrice" parameter.
func (inst *UpdateAuctionHouse) SetCanChangeSalePrice(canChangeSalePrice bool) *UpdateAuctionHouse {
	inst.CanChangeSalePrice = &canChangeSalePrice
	return inst
}

// SetTreasuryMintAccount sets the "treasuryMint" account.
func (inst *UpdateAuctionHouse) SetTreasuryMintAccount(treasuryMint ag_solanago.PublicKey) *UpdateAuctionHouse {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(treasuryMint)
	return inst
}

// GetTreasuryMintAccount gets the "treasuryMint" account.
func (inst *UpdateAuctionHouse) GetTreasuryMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetPayerAccount sets the "payer" account.
func (inst *UpdateAuctionHouse) SetPayerAccount(payer ag_solanago.PublicKey) *UpdateAuctionHouse {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(payer).SIGNER()
	return inst
}

// GetPayerAccount gets the "payer" account.
func (inst *UpdateAuctionHouse) GetPayerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetAuthorityAccount sets the "authority" account.
func (inst *UpdateAuctionHouse) SetAuthorityAccount(authority ag_solanago.PublicKey) *UpdateAuctionHouse {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(authority).SIGNER()
	return inst
}

// GetAuthorityAccount gets the "authority" account.
func (inst *UpdateAuctionHouse) GetAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetNewAuthorityAccount sets the "newAuthority" account.
func (inst *UpdateAuctionHouse) SetNewAuthorityAccount(newAuthority ag_solanago.PublicKey) *UpdateAuctionHouse {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(newAuthority)
	return inst
}

// GetNewAuthorityAccount gets the "newAuthority" account.
func (inst *UpdateAuctionHouse) GetNewAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetFeeWithdrawalDestinationAccount sets the "feeWithdrawalDestination" account.
func (inst *UpdateAuctionHouse) SetFeeWithdrawalDestinationAccount(feeWithdrawalDestination ag_solanago.PublicKey) *UpdateAuctionHouse {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(feeWithdrawalDestination).WRITE()
	return inst
}

// GetFeeWithdrawalDestinationAccount gets the "feeWithdrawalDestination" account.
func (inst *UpdateAuctionHouse) GetFeeWithdrawalDestinationAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetTreasuryWithdrawalDestinationAccount sets the "treasuryWithdrawalDestination" account.
func (inst *UpdateAuctionHouse) SetTreasuryWithdrawalDestinationAccount(treasuryWithdrawalDestination ag_solanago.PublicKey) *UpdateAuctionHouse {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(treasuryWithdrawalDestination).WRITE()
	return inst
}

// GetTreasuryWithdrawalDestinationAccount gets the "treasuryWithdrawalDestination" account.
func (inst *UpdateAuctionHouse) GetTreasuryWithdrawalDestinationAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetTreasuryWithdrawalDestinationOwnerAccount sets the "treasuryWithdrawalDestinationOwner" account.
func (inst *UpdateAuctionHouse) SetTreasuryWithdrawalDestinationOwnerAccount(treasuryWithdrawalDestinationOwner ag_solanago.PublicKey) *UpdateAuctionHouse {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(treasuryWithdrawalDestinationOwner)
	return inst
}

// GetTreasuryWithdrawalDestinationOwnerAccount gets the "treasuryWithdrawalDestinationOwner" account.
func (inst *UpdateAuctionHouse) GetTreasuryWithdrawalDestinationOwnerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetAuctionHouseAccount sets the "auctionHouse" account.
func (inst *UpdateAuctionHouse) SetAuctionHouseAccount(auctionHouse ag_solanago.PublicKey) *UpdateAuctionHouse {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(auctionHouse).WRITE()
	return inst
}

// GetAuctionHouseAccount gets the "auctionHouse" account.
func (inst *UpdateAuctionHouse) GetAuctionHouseAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetTokenProgramAccount sets the "tokenProgram" account.
func (inst *UpdateAuctionHouse) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *UpdateAuctionHouse {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "tokenProgram" account.
func (inst *UpdateAuctionHouse) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetSystemProgramAccount sets the "systemProgram" account.
func (inst *UpdateAuctionHouse) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *UpdateAuctionHouse {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
func (inst *UpdateAuctionHouse) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

// SetAtaProgramAccount sets the "ataProgram" account.
func (inst *UpdateAuctionHouse) SetAtaProgramAccount(ataProgram ag_solanago.PublicKey) *UpdateAuctionHouse {
	inst.AccountMetaSlice[10] = ag_solanago.Meta(ataProgram)
	return inst
}

// GetAtaProgramAccount gets the "ataProgram" account.
func (inst *UpdateAuctionHouse) GetAtaProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(10)
}

// SetRentAccount sets the "rent" account.
func (inst *UpdateAuctionHouse) SetRentAccount(rent ag_solanago.PublicKey) *UpdateAuctionHouse {
	inst.AccountMetaSlice[11] = ag_solanago.Meta(rent)
	return inst
}

// GetRentAccount gets the "rent" account.
func (inst *UpdateAuctionHouse) GetRentAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(11)
}

func (inst UpdateAuctionHouse) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_UpdateAuctionHouse,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst UpdateAuctionHouse) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *UpdateAuctionHouse) Validate() error {
	// Check whether all (required) parameters are set:
	{
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.TreasuryMint is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Payer is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.Authority is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.NewAuthority is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.FeeWithdrawalDestination is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.TreasuryWithdrawalDestination is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.TreasuryWithdrawalDestinationOwner is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.AuctionHouse is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
		if inst.AccountMetaSlice[10] == nil {
			return errors.New("accounts.AtaProgram is not set")
		}
		if inst.AccountMetaSlice[11] == nil {
			return errors.New("accounts.Rent is not set")
		}
	}
	return nil
}

func (inst *UpdateAuctionHouse) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("UpdateAuctionHouse")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=3]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("SellerFeeBasisPoints (OPT)", inst.SellerFeeBasisPoints))
						paramsBranch.Child(ag_format.Param("     RequiresSignOff (OPT)", inst.RequiresSignOff))
						paramsBranch.Child(ag_format.Param("  CanChangeSalePrice (OPT)", inst.CanChangeSalePrice))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=12]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("                      treasuryMint", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("                             payer", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("                         authority", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("                      newAuthority", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("          feeWithdrawalDestination", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("     treasuryWithdrawalDestination", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("treasuryWithdrawalDestinationOwner", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("                      auctionHouse", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("                      tokenProgram", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta("                     systemProgram", inst.AccountMetaSlice.Get(9)))
						accountsBranch.Child(ag_format.Meta("                        ataProgram", inst.AccountMetaSlice.Get(10)))
						accountsBranch.Child(ag_format.Meta("                              rent", inst.AccountMetaSlice.Get(11)))
					})
				})
		})
}

func (obj UpdateAuctionHouse) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `SellerFeeBasisPoints` param (optional):
	{
		if obj.SellerFeeBasisPoints == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.SellerFeeBasisPoints)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `RequiresSignOff` param (optional):
	{
		if obj.RequiresSignOff == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.RequiresSignOff)
			if err != nil {
				return err
			}
		}
	}
	// Serialize `CanChangeSalePrice` param (optional):
	{
		if obj.CanChangeSalePrice == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.CanChangeSalePrice)
			if err != nil {
				return err
			}
		}
	}
	return nil
}
func (obj *UpdateAuctionHouse) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `SellerFeeBasisPoints` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.SellerFeeBasisPoints)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `RequiresSignOff` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.RequiresSignOff)
			if err != nil {
				return err
			}
		}
	}
	// Deserialize `CanChangeSalePrice` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.CanChangeSalePrice)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

// NewUpdateAuctionHouseInstruction declares a new UpdateAuctionHouse instruction with the provided parameters and accounts.
func NewUpdateAuctionHouseInstruction(
	// Parameters:
	sellerFeeBasisPoints uint16,
	requiresSignOff bool,
	canChangeSalePrice bool,
	// Accounts:
	treasuryMint ag_solanago.PublicKey,
	payer ag_solanago.PublicKey,
	authority ag_solanago.PublicKey,
	newAuthority ag_solanago.PublicKey,
	feeWithdrawalDestination ag_solanago.PublicKey,
	treasuryWithdrawalDestination ag_solanago.PublicKey,
	treasuryWithdrawalDestinationOwner ag_solanago.PublicKey,
	auctionHouse ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey,
	ataProgram ag_solanago.PublicKey,
	rent ag_solanago.PublicKey) *UpdateAuctionHouse {
	return NewUpdateAuctionHouseInstructionBuilder().
		SetSellerFeeBasisPoints(sellerFeeBasisPoints).
		SetRequiresSignOff(requiresSignOff).
		SetCanChangeSalePrice(canChangeSalePrice).
		SetTreasuryMintAccount(treasuryMint).
		SetPayerAccount(payer).
		SetAuthorityAccount(authority).
		SetNewAuthorityAccount(newAuthority).
		SetFeeWithdrawalDestinationAccount(feeWithdrawalDestination).
		SetTreasuryWithdrawalDestinationAccount(treasuryWithdrawalDestination).
		SetTreasuryWithdrawalDestinationOwnerAccount(treasuryWithdrawalDestinationOwner).
		SetAuctionHouseAccount(auctionHouse).
		SetTokenProgramAccount(tokenProgram).
		SetSystemProgramAccount(systemProgram).
		SetAtaProgramAccount(ataProgram).
		SetRentAccount(rent)
}
