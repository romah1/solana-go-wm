// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package auction_house_types

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// WithdrawFromTreasury is the `withdrawFromTreasury` instruction.
type WithdrawFromTreasury struct {
	Amount *uint64

	// [0] = [] treasuryMint
	//
	// [1] = [SIGNER] authority
	//
	// [2] = [WRITE] treasuryWithdrawalDestination
	//
	// [3] = [WRITE] auctionHouseTreasury
	//
	// [4] = [WRITE] auctionHouse
	//
	// [5] = [] tokenProgram
	//
	// [6] = [] systemProgram
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewWithdrawFromTreasuryInstructionBuilder creates a new `WithdrawFromTreasury` instruction builder.
func NewWithdrawFromTreasuryInstructionBuilder() *WithdrawFromTreasury {
	nd := &WithdrawFromTreasury{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 7),
	}
	return nd
}

// SetAmount sets the "amount" parameter.
func (inst *WithdrawFromTreasury) SetAmount(amount uint64) *WithdrawFromTreasury {
	inst.Amount = &amount
	return inst
}

// SetTreasuryMintAccount sets the "treasuryMint" account.
func (inst *WithdrawFromTreasury) SetTreasuryMintAccount(treasuryMint ag_solanago.PublicKey) *WithdrawFromTreasury {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(treasuryMint)
	return inst
}

// GetTreasuryMintAccount gets the "treasuryMint" account.
func (inst *WithdrawFromTreasury) GetTreasuryMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetAuthorityAccount sets the "authority" account.
func (inst *WithdrawFromTreasury) SetAuthorityAccount(authority ag_solanago.PublicKey) *WithdrawFromTreasury {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(authority).SIGNER()
	return inst
}

// GetAuthorityAccount gets the "authority" account.
func (inst *WithdrawFromTreasury) GetAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetTreasuryWithdrawalDestinationAccount sets the "treasuryWithdrawalDestination" account.
func (inst *WithdrawFromTreasury) SetTreasuryWithdrawalDestinationAccount(treasuryWithdrawalDestination ag_solanago.PublicKey) *WithdrawFromTreasury {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(treasuryWithdrawalDestination).WRITE()
	return inst
}

// GetTreasuryWithdrawalDestinationAccount gets the "treasuryWithdrawalDestination" account.
func (inst *WithdrawFromTreasury) GetTreasuryWithdrawalDestinationAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetAuctionHouseTreasuryAccount sets the "auctionHouseTreasury" account.
func (inst *WithdrawFromTreasury) SetAuctionHouseTreasuryAccount(auctionHouseTreasury ag_solanago.PublicKey) *WithdrawFromTreasury {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(auctionHouseTreasury).WRITE()
	return inst
}

// GetAuctionHouseTreasuryAccount gets the "auctionHouseTreasury" account.
func (inst *WithdrawFromTreasury) GetAuctionHouseTreasuryAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetAuctionHouseAccount sets the "auctionHouse" account.
func (inst *WithdrawFromTreasury) SetAuctionHouseAccount(auctionHouse ag_solanago.PublicKey) *WithdrawFromTreasury {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(auctionHouse).WRITE()
	return inst
}

// GetAuctionHouseAccount gets the "auctionHouse" account.
func (inst *WithdrawFromTreasury) GetAuctionHouseAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetTokenProgramAccount sets the "tokenProgram" account.
func (inst *WithdrawFromTreasury) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *WithdrawFromTreasury {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "tokenProgram" account.
func (inst *WithdrawFromTreasury) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetSystemProgramAccount sets the "systemProgram" account.
func (inst *WithdrawFromTreasury) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *WithdrawFromTreasury {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
func (inst *WithdrawFromTreasury) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

func (inst WithdrawFromTreasury) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_WithdrawFromTreasury,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst WithdrawFromTreasury) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *WithdrawFromTreasury) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Amount == nil {
			return errors.New("Amount parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.TreasuryMint is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Authority is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.TreasuryWithdrawalDestination is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.AuctionHouseTreasury is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.AuctionHouse is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
	}
	return nil
}

func (inst *WithdrawFromTreasury) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("WithdrawFromTreasury")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("Amount", *inst.Amount))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=7]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("                 treasuryMint", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("                    authority", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("treasuryWithdrawalDestination", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("         auctionHouseTreasury", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("                 auctionHouse", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("                 tokenProgram", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("                systemProgram", inst.AccountMetaSlice.Get(6)))
					})
				})
		})
}

func (obj WithdrawFromTreasury) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Amount` param:
	err = encoder.Encode(obj.Amount)
	if err != nil {
		return err
	}
	return nil
}
func (obj *WithdrawFromTreasury) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Amount`:
	err = decoder.Decode(&obj.Amount)
	if err != nil {
		return err
	}
	return nil
}

// NewWithdrawFromTreasuryInstruction declares a new WithdrawFromTreasury instruction with the provided parameters and accounts.
func NewWithdrawFromTreasuryInstruction(
	// Parameters:
	amount uint64,
	// Accounts:
	treasuryMint ag_solanago.PublicKey,
	authority ag_solanago.PublicKey,
	treasuryWithdrawalDestination ag_solanago.PublicKey,
	auctionHouseTreasury ag_solanago.PublicKey,
	auctionHouse ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey) *WithdrawFromTreasury {
	return NewWithdrawFromTreasuryInstructionBuilder().
		SetAmount(amount).
		SetTreasuryMintAccount(treasuryMint).
		SetAuthorityAccount(authority).
		SetTreasuryWithdrawalDestinationAccount(treasuryWithdrawalDestination).
		SetAuctionHouseTreasuryAccount(auctionHouseTreasury).
		SetAuctionHouseAccount(auctionHouse).
		SetTokenProgramAccount(tokenProgram).
		SetSystemProgramAccount(systemProgram)
}
