// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package auction_house_types

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// CreateAuctionHouse is the `createAuctionHouse` instruction.
type CreateAuctionHouse struct {
	Bump                 *uint8
	FeePayerBump         *uint8
	TreasuryBump         *uint8
	SellerFeeBasisPoints *uint16
	RequiresSignOff      *bool
	CanChangeSalePrice   *bool

	// [0] = [] treasuryMint
	//
	// [1] = [WRITE, SIGNER] payer
	//
	// [2] = [] authority
	//
	// [3] = [WRITE] feeWithdrawalDestination
	//
	// [4] = [WRITE] treasuryWithdrawalDestination
	//
	// [5] = [] treasuryWithdrawalDestinationOwner
	//
	// [6] = [WRITE] auctionHouse
	//
	// [7] = [WRITE] auctionHouseFeeAccount
	//
	// [8] = [WRITE] auctionHouseTreasury
	//
	// [9] = [] tokenProgram
	//
	// [10] = [] systemProgram
	//
	// [11] = [] ataProgram
	//
	// [12] = [] rent
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewCreateAuctionHouseInstructionBuilder creates a new `CreateAuctionHouse` instruction builder.
func NewCreateAuctionHouseInstructionBuilder() *CreateAuctionHouse {
	nd := &CreateAuctionHouse{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 13),
	}
	return nd
}

// SetBump sets the "bump" parameter.
func (inst *CreateAuctionHouse) SetBump(bump uint8) *CreateAuctionHouse {
	inst.Bump = &bump
	return inst
}

// SetFeePayerBump sets the "feePayerBump" parameter.
func (inst *CreateAuctionHouse) SetFeePayerBump(feePayerBump uint8) *CreateAuctionHouse {
	inst.FeePayerBump = &feePayerBump
	return inst
}

// SetTreasuryBump sets the "treasuryBump" parameter.
func (inst *CreateAuctionHouse) SetTreasuryBump(treasuryBump uint8) *CreateAuctionHouse {
	inst.TreasuryBump = &treasuryBump
	return inst
}

// SetSellerFeeBasisPoints sets the "sellerFeeBasisPoints" parameter.
func (inst *CreateAuctionHouse) SetSellerFeeBasisPoints(sellerFeeBasisPoints uint16) *CreateAuctionHouse {
	inst.SellerFeeBasisPoints = &sellerFeeBasisPoints
	return inst
}

// SetRequiresSignOff sets the "requiresSignOff" parameter.
func (inst *CreateAuctionHouse) SetRequiresSignOff(requiresSignOff bool) *CreateAuctionHouse {
	inst.RequiresSignOff = &requiresSignOff
	return inst
}

// SetCanChangeSalePrice sets the "canChangeSalePrice" parameter.
func (inst *CreateAuctionHouse) SetCanChangeSalePrice(canChangeSalePrice bool) *CreateAuctionHouse {
	inst.CanChangeSalePrice = &canChangeSalePrice
	return inst
}

// SetTreasuryMintAccount sets the "treasuryMint" account.
func (inst *CreateAuctionHouse) SetTreasuryMintAccount(treasuryMint ag_solanago.PublicKey) *CreateAuctionHouse {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(treasuryMint)
	return inst
}

// GetTreasuryMintAccount gets the "treasuryMint" account.
func (inst *CreateAuctionHouse) GetTreasuryMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetPayerAccount sets the "payer" account.
func (inst *CreateAuctionHouse) SetPayerAccount(payer ag_solanago.PublicKey) *CreateAuctionHouse {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(payer).WRITE().SIGNER()
	return inst
}

// GetPayerAccount gets the "payer" account.
func (inst *CreateAuctionHouse) GetPayerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetAuthorityAccount sets the "authority" account.
func (inst *CreateAuctionHouse) SetAuthorityAccount(authority ag_solanago.PublicKey) *CreateAuctionHouse {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(authority)
	return inst
}

// GetAuthorityAccount gets the "authority" account.
func (inst *CreateAuctionHouse) GetAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetFeeWithdrawalDestinationAccount sets the "feeWithdrawalDestination" account.
func (inst *CreateAuctionHouse) SetFeeWithdrawalDestinationAccount(feeWithdrawalDestination ag_solanago.PublicKey) *CreateAuctionHouse {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(feeWithdrawalDestination).WRITE()
	return inst
}

// GetFeeWithdrawalDestinationAccount gets the "feeWithdrawalDestination" account.
func (inst *CreateAuctionHouse) GetFeeWithdrawalDestinationAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetTreasuryWithdrawalDestinationAccount sets the "treasuryWithdrawalDestination" account.
func (inst *CreateAuctionHouse) SetTreasuryWithdrawalDestinationAccount(treasuryWithdrawalDestination ag_solanago.PublicKey) *CreateAuctionHouse {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(treasuryWithdrawalDestination).WRITE()
	return inst
}

// GetTreasuryWithdrawalDestinationAccount gets the "treasuryWithdrawalDestination" account.
func (inst *CreateAuctionHouse) GetTreasuryWithdrawalDestinationAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetTreasuryWithdrawalDestinationOwnerAccount sets the "treasuryWithdrawalDestinationOwner" account.
func (inst *CreateAuctionHouse) SetTreasuryWithdrawalDestinationOwnerAccount(treasuryWithdrawalDestinationOwner ag_solanago.PublicKey) *CreateAuctionHouse {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(treasuryWithdrawalDestinationOwner)
	return inst
}

// GetTreasuryWithdrawalDestinationOwnerAccount gets the "treasuryWithdrawalDestinationOwner" account.
func (inst *CreateAuctionHouse) GetTreasuryWithdrawalDestinationOwnerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetAuctionHouseAccount sets the "auctionHouse" account.
func (inst *CreateAuctionHouse) SetAuctionHouseAccount(auctionHouse ag_solanago.PublicKey) *CreateAuctionHouse {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(auctionHouse).WRITE()
	return inst
}

// GetAuctionHouseAccount gets the "auctionHouse" account.
func (inst *CreateAuctionHouse) GetAuctionHouseAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetAuctionHouseFeeAccountAccount sets the "auctionHouseFeeAccount" account.
func (inst *CreateAuctionHouse) SetAuctionHouseFeeAccountAccount(auctionHouseFeeAccount ag_solanago.PublicKey) *CreateAuctionHouse {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(auctionHouseFeeAccount).WRITE()
	return inst
}

// GetAuctionHouseFeeAccountAccount gets the "auctionHouseFeeAccount" account.
func (inst *CreateAuctionHouse) GetAuctionHouseFeeAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetAuctionHouseTreasuryAccount sets the "auctionHouseTreasury" account.
func (inst *CreateAuctionHouse) SetAuctionHouseTreasuryAccount(auctionHouseTreasury ag_solanago.PublicKey) *CreateAuctionHouse {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(auctionHouseTreasury).WRITE()
	return inst
}

// GetAuctionHouseTreasuryAccount gets the "auctionHouseTreasury" account.
func (inst *CreateAuctionHouse) GetAuctionHouseTreasuryAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetTokenProgramAccount sets the "tokenProgram" account.
func (inst *CreateAuctionHouse) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *CreateAuctionHouse {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "tokenProgram" account.
func (inst *CreateAuctionHouse) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

// SetSystemProgramAccount sets the "systemProgram" account.
func (inst *CreateAuctionHouse) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *CreateAuctionHouse {
	inst.AccountMetaSlice[10] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
func (inst *CreateAuctionHouse) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(10)
}

// SetAtaProgramAccount sets the "ataProgram" account.
func (inst *CreateAuctionHouse) SetAtaProgramAccount(ataProgram ag_solanago.PublicKey) *CreateAuctionHouse {
	inst.AccountMetaSlice[11] = ag_solanago.Meta(ataProgram)
	return inst
}

// GetAtaProgramAccount gets the "ataProgram" account.
func (inst *CreateAuctionHouse) GetAtaProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(11)
}

// SetRentAccount sets the "rent" account.
func (inst *CreateAuctionHouse) SetRentAccount(rent ag_solanago.PublicKey) *CreateAuctionHouse {
	inst.AccountMetaSlice[12] = ag_solanago.Meta(rent)
	return inst
}

// GetRentAccount gets the "rent" account.
func (inst *CreateAuctionHouse) GetRentAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(12)
}

func (inst CreateAuctionHouse) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_CreateAuctionHouse,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst CreateAuctionHouse) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *CreateAuctionHouse) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Bump == nil {
			return errors.New("Bump parameter is not set")
		}
		if inst.FeePayerBump == nil {
			return errors.New("FeePayerBump parameter is not set")
		}
		if inst.TreasuryBump == nil {
			return errors.New("TreasuryBump parameter is not set")
		}
		if inst.SellerFeeBasisPoints == nil {
			return errors.New("SellerFeeBasisPoints parameter is not set")
		}
		if inst.RequiresSignOff == nil {
			return errors.New("RequiresSignOff parameter is not set")
		}
		if inst.CanChangeSalePrice == nil {
			return errors.New("CanChangeSalePrice parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.TreasuryMint is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Payer is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.Authority is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.FeeWithdrawalDestination is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.TreasuryWithdrawalDestination is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.TreasuryWithdrawalDestinationOwner is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.AuctionHouse is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.AuctionHouseFeeAccount is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.AuctionHouseTreasury is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
		if inst.AccountMetaSlice[10] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
		if inst.AccountMetaSlice[11] == nil {
			return errors.New("accounts.AtaProgram is not set")
		}
		if inst.AccountMetaSlice[12] == nil {
			return errors.New("accounts.Rent is not set")
		}
	}
	return nil
}

func (inst *CreateAuctionHouse) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("CreateAuctionHouse")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=6]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("                Bump", *inst.Bump))
						paramsBranch.Child(ag_format.Param("        FeePayerBump", *inst.FeePayerBump))
						paramsBranch.Child(ag_format.Param("        TreasuryBump", *inst.TreasuryBump))
						paramsBranch.Child(ag_format.Param("SellerFeeBasisPoints", *inst.SellerFeeBasisPoints))
						paramsBranch.Child(ag_format.Param("     RequiresSignOff", *inst.RequiresSignOff))
						paramsBranch.Child(ag_format.Param("  CanChangeSalePrice", *inst.CanChangeSalePrice))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=13]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("                      treasuryMint", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("                             payer", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("                         authority", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("          feeWithdrawalDestination", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("     treasuryWithdrawalDestination", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("treasuryWithdrawalDestinationOwner", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("                      auctionHouse", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("                   auctionHouseFee", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("              auctionHouseTreasury", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta("                      tokenProgram", inst.AccountMetaSlice.Get(9)))
						accountsBranch.Child(ag_format.Meta("                     systemProgram", inst.AccountMetaSlice.Get(10)))
						accountsBranch.Child(ag_format.Meta("                        ataProgram", inst.AccountMetaSlice.Get(11)))
						accountsBranch.Child(ag_format.Meta("                              rent", inst.AccountMetaSlice.Get(12)))
					})
				})
		})
}

func (obj CreateAuctionHouse) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Bump` param:
	err = encoder.Encode(obj.Bump)
	if err != nil {
		return err
	}
	// Serialize `FeePayerBump` param:
	err = encoder.Encode(obj.FeePayerBump)
	if err != nil {
		return err
	}
	// Serialize `TreasuryBump` param:
	err = encoder.Encode(obj.TreasuryBump)
	if err != nil {
		return err
	}
	// Serialize `SellerFeeBasisPoints` param:
	err = encoder.Encode(obj.SellerFeeBasisPoints)
	if err != nil {
		return err
	}
	// Serialize `RequiresSignOff` param:
	err = encoder.Encode(obj.RequiresSignOff)
	if err != nil {
		return err
	}
	// Serialize `CanChangeSalePrice` param:
	err = encoder.Encode(obj.CanChangeSalePrice)
	if err != nil {
		return err
	}
	return nil
}
func (obj *CreateAuctionHouse) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Bump`:
	err = decoder.Decode(&obj.Bump)
	if err != nil {
		return err
	}
	// Deserialize `FeePayerBump`:
	err = decoder.Decode(&obj.FeePayerBump)
	if err != nil {
		return err
	}
	// Deserialize `TreasuryBump`:
	err = decoder.Decode(&obj.TreasuryBump)
	if err != nil {
		return err
	}
	// Deserialize `SellerFeeBasisPoints`:
	err = decoder.Decode(&obj.SellerFeeBasisPoints)
	if err != nil {
		return err
	}
	// Deserialize `RequiresSignOff`:
	err = decoder.Decode(&obj.RequiresSignOff)
	if err != nil {
		return err
	}
	// Deserialize `CanChangeSalePrice`:
	err = decoder.Decode(&obj.CanChangeSalePrice)
	if err != nil {
		return err
	}
	return nil
}

// NewCreateAuctionHouseInstruction declares a new CreateAuctionHouse instruction with the provided parameters and accounts.
func NewCreateAuctionHouseInstruction(
	// Parameters:
	bump uint8,
	feePayerBump uint8,
	treasuryBump uint8,
	sellerFeeBasisPoints uint16,
	requiresSignOff bool,
	canChangeSalePrice bool,
	// Accounts:
	treasuryMint ag_solanago.PublicKey,
	payer ag_solanago.PublicKey,
	authority ag_solanago.PublicKey,
	feeWithdrawalDestination ag_solanago.PublicKey,
	treasuryWithdrawalDestination ag_solanago.PublicKey,
	treasuryWithdrawalDestinationOwner ag_solanago.PublicKey,
	auctionHouse ag_solanago.PublicKey,
	auctionHouseFeeAccount ag_solanago.PublicKey,
	auctionHouseTreasury ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey,
	ataProgram ag_solanago.PublicKey,
	rent ag_solanago.PublicKey) *CreateAuctionHouse {
	return NewCreateAuctionHouseInstructionBuilder().
		SetBump(bump).
		SetFeePayerBump(feePayerBump).
		SetTreasuryBump(treasuryBump).
		SetSellerFeeBasisPoints(sellerFeeBasisPoints).
		SetRequiresSignOff(requiresSignOff).
		SetCanChangeSalePrice(canChangeSalePrice).
		SetTreasuryMintAccount(treasuryMint).
		SetPayerAccount(payer).
		SetAuthorityAccount(authority).
		SetFeeWithdrawalDestinationAccount(feeWithdrawalDestination).
		SetTreasuryWithdrawalDestinationAccount(treasuryWithdrawalDestination).
		SetTreasuryWithdrawalDestinationOwnerAccount(treasuryWithdrawalDestinationOwner).
		SetAuctionHouseAccount(auctionHouse).
		SetAuctionHouseFeeAccountAccount(auctionHouseFeeAccount).
		SetAuctionHouseTreasuryAccount(auctionHouseTreasury).
		SetTokenProgramAccount(tokenProgram).
		SetSystemProgramAccount(systemProgram).
		SetAtaProgramAccount(ataProgram).
		SetRentAccount(rent)
}
