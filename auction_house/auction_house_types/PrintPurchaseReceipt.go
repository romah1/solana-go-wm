// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package auction_house_types

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// PrintPurchaseReceipt is the `printPurchaseReceipt` instruction.
type PrintPurchaseReceipt struct {
	PurchaseReceiptBump *uint8

	// [0] = [WRITE] purchaseReceipt
	//
	// [1] = [WRITE] listingReceipt
	//
	// [2] = [WRITE] bidReceipt
	//
	// [3] = [WRITE, SIGNER] bookkeeper
	//
	// [4] = [] systemProgram
	//
	// [5] = [] rent
	//
	// [6] = [] instruction
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewPrintPurchaseReceiptInstructionBuilder creates a new `PrintPurchaseReceipt` instruction builder.
func NewPrintPurchaseReceiptInstructionBuilder() *PrintPurchaseReceipt {
	nd := &PrintPurchaseReceipt{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 7),
	}
	return nd
}

// SetPurchaseReceiptBump sets the "purchaseReceiptBump" parameter.
func (inst *PrintPurchaseReceipt) SetPurchaseReceiptBump(purchaseReceiptBump uint8) *PrintPurchaseReceipt {
	inst.PurchaseReceiptBump = &purchaseReceiptBump
	return inst
}

// SetPurchaseReceiptAccount sets the "purchaseReceipt" account.
func (inst *PrintPurchaseReceipt) SetPurchaseReceiptAccount(purchaseReceipt ag_solanago.PublicKey) *PrintPurchaseReceipt {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(purchaseReceipt).WRITE()
	return inst
}

// GetPurchaseReceiptAccount gets the "purchaseReceipt" account.
func (inst *PrintPurchaseReceipt) GetPurchaseReceiptAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetListingReceiptAccount sets the "listingReceipt" account.
func (inst *PrintPurchaseReceipt) SetListingReceiptAccount(listingReceipt ag_solanago.PublicKey) *PrintPurchaseReceipt {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(listingReceipt).WRITE()
	return inst
}

// GetListingReceiptAccount gets the "listingReceipt" account.
func (inst *PrintPurchaseReceipt) GetListingReceiptAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetBidReceiptAccount sets the "bidReceipt" account.
func (inst *PrintPurchaseReceipt) SetBidReceiptAccount(bidReceipt ag_solanago.PublicKey) *PrintPurchaseReceipt {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(bidReceipt).WRITE()
	return inst
}

// GetBidReceiptAccount gets the "bidReceipt" account.
func (inst *PrintPurchaseReceipt) GetBidReceiptAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetBookkeeperAccount sets the "bookkeeper" account.
func (inst *PrintPurchaseReceipt) SetBookkeeperAccount(bookkeeper ag_solanago.PublicKey) *PrintPurchaseReceipt {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(bookkeeper).WRITE().SIGNER()
	return inst
}

// GetBookkeeperAccount gets the "bookkeeper" account.
func (inst *PrintPurchaseReceipt) GetBookkeeperAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetSystemProgramAccount sets the "systemProgram" account.
func (inst *PrintPurchaseReceipt) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *PrintPurchaseReceipt {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
func (inst *PrintPurchaseReceipt) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetRentAccount sets the "rent" account.
func (inst *PrintPurchaseReceipt) SetRentAccount(rent ag_solanago.PublicKey) *PrintPurchaseReceipt {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(rent)
	return inst
}

// GetRentAccount gets the "rent" account.
func (inst *PrintPurchaseReceipt) GetRentAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetInstructionAccount sets the "instruction" account.
func (inst *PrintPurchaseReceipt) SetInstructionAccount(instruction ag_solanago.PublicKey) *PrintPurchaseReceipt {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(instruction)
	return inst
}

// GetInstructionAccount gets the "instruction" account.
func (inst *PrintPurchaseReceipt) GetInstructionAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

func (inst PrintPurchaseReceipt) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_PrintPurchaseReceipt,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst PrintPurchaseReceipt) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *PrintPurchaseReceipt) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.PurchaseReceiptBump == nil {
			return errors.New("PurchaseReceiptBump parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.PurchaseReceipt is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.ListingReceipt is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.BidReceipt is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.Bookkeeper is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.Rent is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.Instruction is not set")
		}
	}
	return nil
}

func (inst *PrintPurchaseReceipt) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("PrintPurchaseReceipt")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("PurchaseReceiptBump", *inst.PurchaseReceiptBump))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=7]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("purchaseReceipt", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta(" listingReceipt", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("     bidReceipt", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("     bookkeeper", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("  systemProgram", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("           rent", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("    instruction", inst.AccountMetaSlice.Get(6)))
					})
				})
		})
}

func (obj PrintPurchaseReceipt) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `PurchaseReceiptBump` param:
	err = encoder.Encode(obj.PurchaseReceiptBump)
	if err != nil {
		return err
	}
	return nil
}
func (obj *PrintPurchaseReceipt) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `PurchaseReceiptBump`:
	err = decoder.Decode(&obj.PurchaseReceiptBump)
	if err != nil {
		return err
	}
	return nil
}

// NewPrintPurchaseReceiptInstruction declares a new PrintPurchaseReceipt instruction with the provided parameters and accounts.
func NewPrintPurchaseReceiptInstruction(
	// Parameters:
	purchaseReceiptBump uint8,
	// Accounts:
	purchaseReceipt ag_solanago.PublicKey,
	listingReceipt ag_solanago.PublicKey,
	bidReceipt ag_solanago.PublicKey,
	bookkeeper ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey,
	rent ag_solanago.PublicKey,
	instruction ag_solanago.PublicKey) *PrintPurchaseReceipt {
	return NewPrintPurchaseReceiptInstructionBuilder().
		SetPurchaseReceiptBump(purchaseReceiptBump).
		SetPurchaseReceiptAccount(purchaseReceipt).
		SetListingReceiptAccount(listingReceipt).
		SetBidReceiptAccount(bidReceipt).
		SetBookkeeperAccount(bookkeeper).
		SetSystemProgramAccount(systemProgram).
		SetRentAccount(rent).
		SetInstructionAccount(instruction)
}
